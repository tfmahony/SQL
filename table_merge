-- First, let's create each table and insert the values in them.

    CREATE TABLE target (
        id INT,
        val VARCHAR(1)
    );

    INSERT INTO target (id, val) VALUES
    (1, 'A'),
    (2, 'A'),
    (3, NULL),
    (5, 'A'),
    (8, 'A'),
    (9, NULL),
    (10, NULL);

    CREATE TABLE source (
        id INT,
        val VARCHAR(1)
    );

    INSERT INTO source (id, val) VALUES
    (1, NULL),
    (2, 'B'),
    (4, 'B'),
    (8, 'B'),
    (9, 'B'),
    (10, NULL),
    (11, NULL);

-- Now, we need to use SQL to create each result table.

-- UPDATE TABLE. I create a destination table based on the target table and then use the UPDATE command.

    CREATE TABLE update_table AS
    SELECT *
    FROM target;

    UPDATE update_table
    SET val = source.val
    FROM source
    WHERE update_table.id = source.id;

-- UPDATE NULL FILL. I use a similar UPDATE command, but I only have the NULL values updated as specified in the WHERE statement.

    CREATE TABLE update_null_fill AS
    SELECT *
    FROM target;

    UPDATE update_null_fill
    SET val = source.val
    FROM source
    WHERE update_null_fill.id = source.id AND update_null_fill.val IS NULL AND source.val IS NOT NULL;

-- UPDATE OVERRIDE. This is a very similar command to the previous, except this time I specify that values are only updated if the source value is not NULL.

    CREATE TABLE update_override AS
    SELECT *
    FROM target;

    UPDATE update_override
    SET val = source.val
    FROM source
    WHERE update_override.id = source.id AND source.val IS NOT NULL;

-- MERGE TABLE. The merge is similar to the update, but I add an extra step to insert rows from the source where the id does not already exist in the merged table.

    CREATE TABLE merge_table AS
    SELECT *
    FROM target;

    UPDATE merge_table
    SET val = source.val
    FROM source
    WHERE merge_table.id = source.id;

    INSERT INTO merge_table (id, val)
    SELECT
        source.id,
        source.val
    FROM
        source
    WHERE
        source.id NOT IN (SELECT id FROM merge_table);

-- MERGE NULL FILL. The process for this is similar to the update null fill, except with the added step of adding rows that don't already exist in the merged table.

    CREATE TABLE merge_null_fill AS
    SELECT *
    FROM target;

    UPDATE merge_null_fill
    SET val = source.val
    FROM source
    WHERE merge_null_fill.id = source.id AND merge_null_fill.val IS NULL and source.val IS NOT NULL;

    INSERT INTO merge_null_fill (id, val)
    SELECT
        source.id,
        source.val
    FROM
        source
    WHERE
        source.id NOT IN (SELECT id FROM merge_null_fill);

-- MERGE OVRERIDE. Again, very similar to the update override except we need to add the extra rows from the source that don't already exist in the merged table.

    CREATE TABLE merge_override AS
    SELECT *
    FROM target;
  
    UPDATE merge_override
    SET val = source.val
    FROM source
    WHERE merge_override.id = source.id AND source.val IS NOT NULL;

    INSERT INTO merge_override (id, val)
    SELECT
        source.id,
        source.val
    FROM
        source
    WHERE
        source.id NOT IN (SELECT id FROM merge_override);

-- APPEND. This is relatively straightforward. All we should need to do is insert the values from the source table into the new appended table.

    CREATE TABLE append_table AS
    SELECT *
    FROM target;

    INSERT INTO append_table (id, val)
    SELECT
        source.id,
        source.val
    FROM
        source;
